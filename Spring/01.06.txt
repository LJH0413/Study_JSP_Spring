AOP (Aspect Oriented Programming) : 관점 지향 프로그래밍
  - 매번 중복 되는 코드를 한번에 스프링 프레임워크에서 적용하는 방법
  - 프로그램의 응집도를 높이는 기술
  - 로그, 예외, 트랜잭션 처리 
  - 관심 분리 
	- 횡단 관심 - 공통으로 적용되는 코드(로깅, 예외, 트랜잭션처리)
	- 핵심 관심 - 비즈니스 로직 처리 
  
AOP 사용 
  - pom.xml 에서 AOP 관련 라이브러리 추가 [p151]
   ===================================
		<!--AOP 관련 라이브러리 추가  -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>		
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.8</version>
		</dependency>
  =============================================
  - NameSpace 에 aop 등록 (applicationContext.xml)
  - applicationContext.xml에서 AOP 등록 설정 
=================================
<aop:config>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" 
			id="allPointcut"/>
	<aop:aspect ref="log">
		<aop:before method="printLog" pointcut-ref="allPointcut" />
	</aop:aspect>
</aop:config>
============================

AOP의 포인트컷 표현식 - 
  
  execution( * com.springbook.biz..*Impl.*(..))
     - * : 리턴 타입
     - com.springbook.biz.. : 패키지 경로(.. : 하위의 모든 패키지를 포함) 
     - *Impl  : Impl로 끝나는 모든 클래스
     - *(..)    : 모든 메소드의 모든 매개변수 

  execution(* com.springbook.biz..*Impl.get*(..))
     - * : 리턴 타입
     - com.springbook.biz.. : 패키지 경로(.. : 하위의 모든 패키지를 포함) 
     - *Impl  : Impl로 끝나는 모든 클래스
     - get*(..)    :  get으로 시작하는 모든 메소드의 모든 매개변수      


AOP 관련 용어 
   - 조인 포인트 (Joinpoint) : 클라이언트가 호출하는 모든 비즈니스 메소드를 조인 포인트 
	- 모든 클래스내의 모든 메소드를 조인포인트, <== AOP 적용 대상(메소드)
   - 포인트 컷 (Pointcut) : 필터링된 조인 포인트 <== AOP 적용
	원하는(필터링) 메소드에만 AOP를 적용. 
   - 어드바이스(Advice) : 횡단 관심(공통으로 적용되는 코드) , 별도의 클래스로 생성
      - 어드바이스 (Advice) 동작 시점 
	- Before : 비즈니스 메소드 실행전 동작
	- After 
	     - After Returning : 비즈니스 메소드가 성공적으로 리턴이되면 작동
	     - After Throwing : 비즈니스 메소드가 예외가 발생하면 동작 
	     - After  : 비즈니스 메소드가 실행을 한후 무조건 실행. 
	- Around : 비즈니스 메소드 실행 전, 후 실행 
   - 위빙(Weaving) : 포인트 컷으로 지정한 관심 메소드가 호출될때, 어드바이스에 
		해당하는 관심 메소드가 삽입 되는 과정.
		위빙을 통해서 비즈니스 메소드를 수정하지 않고, 기능을 추가하거나,
		변경 할 수 있다. 스프링은 런타임 위빙만 지원한다. 




 

 






